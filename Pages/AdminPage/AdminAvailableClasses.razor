@page "/AvailableClasses"

@namespace AdminPage
@attribute [Authorize(Roles = "Admin")]
@using ACMS.DAL.Models
@inject NavigationManager NavManager
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Identity;
@inject UserManager<User> UserManager
@inject RoleManager<UserRole> RoleManager
@using APIACMS.Services;
@inject IAdminServices adminServices;





<div class="mainbox">

    <h3><strong> Available Classes </strong></h3>
    <div class="pt-3">
        @if (teachers == null)
        {

            <div class="d-flex justify-content-center">
                <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>

        }
        else
        {



            @if (success == "True")
            {
                <div class="alert alert-success" role="alert">
                    <h4 class="alert-heading">Operation Success!</h4>
                </div>
            }
            else if (success == "False")
            {
                <div class="alert alert-danger" role="alert">
                    <h4 class="alert-heading">Operation Failed!</h4>
                    <p>Please try again later or contact our Admin.</p>
                </div>
            }
            <h2 class="centered">Available Classes's Table</h2>
            <table class=" fixed_header center">

                <thead>
                    <tr>
                        <th>
                            Class ID
                        </th>

                        <th>
                            Created On
                        </th>

                        <th>
                            Class Name
                        </th>

                        <th>
                            Teacher
                        </th>

                        <th>
                            Update
                        </th>
                        <th>
                            Delete
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in classes)
                    {

                        <tr>
                            <td>@item.ClassId</td>
                            <td>@item.CreatedOn</td>
                            <td>
                                <input type="text" class="form-control" @bind="@item.ClassName" />
                            </td>
                            <td>
                                <select class="form-control" name="Teacher" @bind="@item.TeacherId">
                                    @foreach (var teacher in teachers)
                                    {
                                        <option value="@teacher.TeacherId">@teacher.FirstName @teacher.LastName</option>
                                    }
                                </select>
                            </td>
                            <td>
                                @if (IsProcessing is false)
                                {

                                    <button class="btn btn-outline-warning btn-outline-warning search" @onclick="()=> Update(item)">Update</button>

                                }
                                else
                                {
                                    <button class="btn btn-warning" type="button" disabled>
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        Loading...
                                    </button>

                                }
                            </td>
                            <td>
                                @if (IsProcessing is false)
                                {

                                    <button class="btn btn-outline-danger btn-outline-danger search" @onclick="()=> Delete(item)">Delete</button>

                                }
                                else
                                {
                                    <button class="btn btn-danger" type="button" disabled>
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        Loading...
                                    </button>

                                }
                            </td>


                        </tr>

                    }
                </tbody>
            </table>
             <br />
            <EditForm Model="@model" OnValidSubmit="@HandleValidSubmitAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="col-sm-8">
                        <div class="form-group row">
                            <label for="ClassName" class="col-sm-3 col-form-label centered">Class Name :</label>
                            <div class="col-sm-9">
                                <InputText @bind-Value="model.ClassName" class="form-control" id="ClassName">
                                    
                                </InputText>
                            </div>
                        </div>

                        <div class="form-group row">
                            <label for="Teacher" class="col-sm-3 col-form-label centered">Class Teacher:</label>
                            <div class="col-sm-9">
                                <InputSelect @bind-Value="model.TeacherId" class="form-control" id="Teacher">
                                    @foreach (var teacher in teachers)
                                        {
                                        <option value="@teacher.TeacherId">@teacher.FirstName @teacher.LastName</option>
                                        }
                                </InputSelect>
                            </div>
                        </div>

                        <div class="form-group row">
                            <div class="col-sm-5">
                                <div class="spin-row">

                                </div>
                            </div>
                            @if (IsProcessing is false)
                            {

                                <button class="btn btn-primary btn-outline-primary float-right search">Create</button>

                            }
                            else
                            {
                                <button class="btn btn-primary" type="button" disabled>
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    Loading...
                                </button>

                            }

                        </div>
                    </div>
                </div>
            </EditForm>


        }

    </div>

</div>

@code {
    private AvailableClass model { get; set; } = new AvailableClass();
    private List<AvailableClass> classes;
    private List<Teacher> teachers;
    private string success;
    private bool IsProcessing { get; set; }


    protected override async Task OnInitializedAsync()
    {
        
        classes = adminServices.GetAvailableClasses().ToList();
        teachers = adminServices.GetTeacher().ToList();




    }

    private async Task Update(AvailableClass item)
    {
        success = "False";
        IsProcessing = true;
        var result = adminServices.UpdateAvailableClass(item);
        IsProcessing = false;
        if (result == true)
        {
            success = "True";
            StateHasChanged();
        }
        else
        {
            success = "False";
            StateHasChanged();
        }

    }

    private async Task Delete(AvailableClass item)
    {
        success = "False";
        IsProcessing = true;
        var result = adminServices.DeleteAvailableClass(item);
        IsProcessing = false;
        if (result == true)
        {
            success = "True";
            classes = adminServices.GetAvailableClasses().ToList();
            StateHasChanged();
        }
        else
        {
            success = "False";
            StateHasChanged();
        }

    }

    private async Task HandleValidSubmitAsync()
    {
        success = "False";
        IsProcessing = true;
        var result = adminServices.CreateAvailableClass(model);
        IsProcessing = false;
        if (result == true)
        {
            success = "True";
            classes = adminServices.GetAvailableClasses().ToList();
            model = new AvailableClass();
            StateHasChanged();
        }
        else
        {
            success = "False";
            StateHasChanged();
        }

    }
}
