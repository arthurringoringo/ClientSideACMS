@page "/Teacher/ClassReport"

@namespace TeacherPage
@attribute [Authorize(Roles = "Teacher,Admin")]
@using ACMS.DAL.Models
@inject NavigationManager NavManager
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Identity;
@inject UserManager<User> UserManager
@inject RoleManager<UserRole> RoleManager
@using APIACMS.Services;
@inject IAdminServices adminServices;





<div class="mainbox">

    <h3>
        <strong> Class Report </strong>
    </h3>
    <div class="pt-3">
        @if (IsProcessing == true)
        {

            <div class="d-flex justify-content-center">
                <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>

        }
        else
        {



            @if (success == "True")
            {
                <div class="alert alert-success" role="alert">
                    <h4 class="alert-heading">Operation Success!</h4>
                </div>
            }
            else if (success == "False")
            {
                <div class="alert alert-danger" role="alert">
                    <h4 class="alert-heading">Operation Failed!</h4>
                    <p>Please try again later or contact our Admin.</p>
                </div>
            }
            <EditForm Model="@model" OnValidSubmit="@HandleValidSubmitAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group row">
                    <label for="reportid" class="col-sm-2 col-form-label centered">Class :</label>
                    <div class="col-sm-6">
                        <InputSelect @bind-Value="model.ClassReportId" class="form-control" id="reportid">
                            <option value="">Please Select a Class</option>
                            @foreach (var items in registredClasses)
                                {
                                <option value="@items.ClassReportId">@items.Class.ClassName - @items.Student.FirstName @items.Student.LastName - @items.Category.CategoryName </option>
                                }
                        </InputSelect>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="remarks" class="col-sm-2 col-form-label centered">Remarks :</label>
                    <div class="col-sm-6">
                        <InputTextArea @bind-Value="model.Remarks" class="form-control" id="remarks">
                        </InputTextArea>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-sm-5">
                        <div class="spin-row">

                        </div>
                    </div>
                    @if (IsProcessing is false)
                    {

                        <button class="btn btn-primary btn-outline-primary float-right search">Submit</button>

                    }
                    else
                    {
                        <button class="btn btn-primary" type="button" disabled>
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            Loading...
                        </button>

                    }

                </div>
            </EditForm>




        }

    </div>

</div>

@code {
    private ClassReport model { get; set; } = new ClassReport();

    private List<RegistredClass> registredClasses;
    private Teacher CurrentTeacherUser;
    private string success;
    private bool IsProcessing { get; set; }


    protected override async Task OnInitializedAsync()
    {
        // Change to async for loadings
        IsProcessing = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated && user != null)
        {
            var currentUser = await UserManager.GetUserAsync(user);

            CurrentTeacherUser = adminServices.GetTeacherByCondition(x => x.UserId == currentUser.Id).FirstOrDefault();
            registredClasses = adminServices.GetAllRegistredClassWithExpressionAndFkData(x => x.Class.Teacher.TeacherId == CurrentTeacherUser.TeacherId).ToList();




        }
        else
        {

        }

        IsProcessing = false;





    }

    //private async Task Update(RegistredClass item)
    //{
    //    success = "False";
    //    IsProcessing = true;
    //    var result = adminServices.UpdateRegisteredClass(item);
    //    IsProcessing = false;
    //    if (result == true)
    //    {
    //        success = "True";
    //        StateHasChanged();
    //    }
    //    else
    //    {
    //        success = "False";
    //        StateHasChanged();
    //    }

    //}

    //private async Task Delete(RegistredClass item)
    //{
    //    success = "False";
    //    IsProcessing = true;
    //    var result = adminServices.DeleteRegisteredClass(item);
    //    IsProcessing = false;
    //    if (result == true)
    //    {
    //        success = "True";
    //        registredClasses = adminServices.GetRegistredClass().ToList();
    //        StateHasChanged();
    //    }
    //    else
    //    {
    //        success = "False";
    //        StateHasChanged();
    //    }

    //}

    private async Task HandleValidSubmitAsync()
    {
        success = "False";
        IsProcessing = true;
        model.CreatedOn = DateTime.Now;
        var result = adminServices.UpdateClassReport(model);
        IsProcessing = false;
        if (result == true)
        {
            success = "True";
            registredClasses = adminServices.GetAllRegistredClassWithExpressionAndFkData(x => x.Class.Teacher.TeacherId == CurrentTeacherUser.TeacherId).ToList();
            StateHasChanged();
        }
        else
        {
            success = "False";
            StateHasChanged();
        }

    }
}
