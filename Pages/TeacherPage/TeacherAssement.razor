@page "/StudentAssessment"

@namespace TeacherPage
@attribute [Authorize(Roles = "Teacher")]
@using ACMS.DAL.Models
@inject NavigationManager NavManager
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Identity;
@inject UserManager<User> UserManager
@inject RoleManager<UserRole> RoleManager
@using APIACMS.Services;
@inject IAdminServices adminServices;
@inject IAPIServiceExtension serviceExt;   






<div class="mainbox">

    <h3><strong> Student Assesment </strong></h3>
    <div class="pt-3">
        @if (IsProcessing == true)
        {

            <div class="d-flex justify-content-center">
                <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>

        }
        else
        {



            @if (success == "True")
            {
                <div class="alert alert-success" role="alert">
                    <h4 class="alert-heading">Operation Success!</h4>
                </div>
            }
            else if (success == "False")
            {
                <div class="alert alert-danger" role="alert">
                    <h4 class="alert-heading">Operation Failed!</h4>
                    <p>Please try again later or contact our Admin.</p>
                </div>
            }
            <h2 class="centered">Available Classes's Table</h2>
            <table class=" fixed_header center">

                <thead>
                    <tr>
                        <th>
                            Id
                        </th>

                        <th>
                            Date Registred
                        </th>

                        <th>
                            Student Name
                        </th>

                        <th>
                            Category
                        </th>
                        <th>
                            Class name
                        </th>

                        <th>
                            Confirmed by Teacher
                        </th>
                        <th>
                            Assesment Date Time
                        </th>
                        <th>
                            Payment Method
                        </th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in registredClasses)
                    {

                        <tr>
                            <td>@item.RegistredClassId</td>
                            <td>@item.DateRegistered</td>
                            <td>
                                @item.Student.FirstName @item.Student.LastName
                            </td>
                            <td>
                                @item.Category.CategoryName
                            </td>
                            <td>
                                 @item.Class.ClassName
                            </td>
                            <td>
                                @item.ConfirmedByTeacher
                            </td>
                            <td>
                                @item.AssessmentDate
                            </td>
                            <td>
                                @item.PaymentMethod.MethodName
                            </td>


                          

                        </tr>

                    }
                </tbody>
            </table>
            <br />
            <h3>Assessment Schedule</h3>
                <EditForm Model="@model" OnValidSubmit="@HandleValidSubmitAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="row">
                        <div class="col-sm-8">

                            <div class="form-group row">
                                <label for="class" class="col-sm-3 col-form-label centered">Select class:</label>
                                <div class="col-sm-9">
                                    <InputSelect @bind-Value="model.RegistredClassId" class="form-control" id="class" >
                                        @foreach (var item in registredClasses)
                                            {
                                            <option value="@item.RegistredClassId">@item.Class.ClassName | @item.Student.FirstName @item.Student.LastName| @item.Category.CategoryName</option>
                                            }
                                    </InputSelect>
                                </div>
                            </div>
                            @*<div class="form-group row">
                                <label for="class" class="col-sm-3 col-form-label centered">Select Date:</label>
                                <div class="col-sm-9">
                                    <InputDate @bind-Value="model.Day" class="form-control" id="class">

                                    </InputDate>
                                </div>
                            </div>*@
                            <div class="form-group row">
                                <label for="time" class="col-sm-3 col-form-label centered">Select Date and Time:</label>
                                <div class="col-sm-9">
                                    <SfDateTimePicker TValue="DateTime?" @bind-Value="model.AssessmentDate" Placeholder='Select a Date and Time'></SfDateTimePicker>
                                 
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="assessmentMethod" class="col-sm-3 col-form-label centered">Assessment Method:</label>
                                <div class="col-sm-9">
                                    <InputSelect @bind-Value="assessmentMethod" class="form-control" id="assessmentMethod">
                                        <option value="Online">Online</option>
                                        <option value="Face To Face">Face To Face</option>

                                    </InputSelect>
                                 
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="assessmentPlace" class="col-sm-3 col-form-label centered">Assessment Place/URL:</label>
                                <div class="col-sm-9">
                                    <InputText @bind-Value="assessmentPlace" class="form-control" id="assessmentPlace">
                                        <option value="Online">Online</option>
                                        <option value="Face To Face">Face To Face</option>

                                    </InputText>
                                 
                                </div>
                            </div>


                            <div class="form-group row">
                                <div class="col-sm-5">
                                    <div class="spin-row">

                                    </div>
                                </div>
                                @if (IsProcessing is false)
                                {

                                    <button class="btn btn-primary btn-outline-primary float-right search">Update</button>

                                }
                                else
                                {
                                    <button class="btn btn-primary" type="button" disabled>
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        Loading...
                                    </button>

                                }

                            </div>
                        </div>
                    </div>
                </EditForm>


        }

    </div>

</div>

@code {

    private RegistredClass model { get; set; } = new RegistredClass();
    private string assessmentMethod;
    private string assessmentPlace;
    private List<RegistredClass> registredClasses;
    private string success;
    private bool IsProcessing { get; set; }
    private User CurrentUser;
    private Teacher CurrentTeacherUser;


    protected override async Task OnInitializedAsync()
    {
        // Change to async for loadings
        IsProcessing = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        success = null;
        if (user.Identity.IsAuthenticated && user != null)
        {
            var currentUser = await UserManager.GetUserAsync(user);

            CurrentTeacherUser = adminServices.GetTeacherByCondition(x => x.UserId == currentUser.Id).FirstOrDefault();




        }
        else
        {

        }

        registredClasses = adminServices.GetAllRegistredClassWithExpressionAndFkData(x => x.Class.TeacherId == CurrentTeacherUser.TeacherId).ToList();


        IsProcessing = false;





    }

    private async Task HandleValidSubmitAsync()
    {
        success = "False";
        IsProcessing = true;
        var item = adminServices.GetRegistredClassByCondition(x => x.RegistredClassId == model.RegistredClassId).FirstOrDefault();
        item.AssessmentDate = model.AssessmentDate;
        var result = adminServices.UpdateRegisteredClass(item);
        IsProcessing = false;
        if (result == true)
        {
            registredClasses = adminServices.GetAllRegistredClassWithExpressionAndFkData(x => x.Class.TeacherId == CurrentTeacherUser.TeacherId).ToList();
            var email = new EmailDto();
            email.To = registredClasses.Where(x => x.RegistredClassId==model.RegistredClassId).FirstOrDefault().Student.User.Email;
            email.Cc = registredClasses.Where(x => x.RegistredClassId==model.RegistredClassId).FirstOrDefault().Class.Teacher.User.Email;
            email.Subject = "Assessment Information";
            email.Body = "Dear Student, your teacher has scheduled assessment on " + item.AssessmentDate + " through " + assessmentMethod + " at " + assessmentPlace + " please come accordingly. Thank you ";

            var emailsendresult = serviceExt.SendEmail(email);
            model = new RegistredClass();
            success = "True";
            StateHasChanged();
        }

        else
        {
            success = "False";
            StateHasChanged();
        }

    }



}
